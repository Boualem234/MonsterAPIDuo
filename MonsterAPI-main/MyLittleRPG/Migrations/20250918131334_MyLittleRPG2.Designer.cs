// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyLittleRPG_ElGuendouz.Data.Context;

#nullable disable

namespace MyLittleRPG_ElGuendouz.Migrations
{
    [DbContext(typeof(MonsterContext))]
    [Migration("20250918131334_MyLittleRPG2")]
    partial class MyLittleRPG2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MyLittleRPG_ElGuendouz.Models.Character", b =>
                {
                    b.Property<int>("idPersonnage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idPersonnage"));

                    b.Property<DateTime>("dateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("def")
                        .HasColumnType("int");

                    b.Property<int>("exp")
                        .HasColumnType("int");

                    b.Property<int>("force")
                        .HasColumnType("int");

                    b.Property<int>("niveau")
                        .HasColumnType("int");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("posX")
                        .HasColumnType("int");

                    b.Property<int>("posY")
                        .HasColumnType("int");

                    b.Property<int>("pv")
                        .HasColumnType("int");

                    b.Property<int>("pvMax")
                        .HasColumnType("int");

                    b.Property<int>("utilisateurId")
                        .HasColumnType("int");

                    b.HasKey("idPersonnage");

                    b.HasIndex("utilisateurId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("MyLittleRPG_ElGuendouz.Models.Monster", b =>
                {
                    b.Property<int>("idMonster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("idMonster"));

                    b.Property<int>("defenseBase")
                        .HasColumnType("int");

                    b.Property<int>("experienceBase")
                        .HasColumnType("int");

                    b.Property<int>("forceBase")
                        .HasColumnType("int");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("pointVieBase")
                        .HasColumnType("int");

                    b.Property<int>("pokemonId")
                        .HasColumnType("int");

                    b.Property<string>("spriteUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("type1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("type2")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("idMonster");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("MyLittleRPG_ElGuendouz.Models.Tuile", b =>
                {
                    b.Property<int>("PositionX")
                        .HasColumnType("int");

                    b.Property<int>("PositionY")
                        .HasColumnType("int");

                    b.Property<bool>("EstTraversable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PositionX", "PositionY");

                    b.ToTable("Tuiles");
                });

            modelBuilder.Entity("MyLittleRPG_ElGuendouz.Models.User", b =>
                {
                    b.Property<int>("utilisateurId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("utilisateurId"));

                    b.Property<DateTime>("dateInscription")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("isConnected")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("mdp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("pseudo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("utilisateurId");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("MyLittleRPG_ElGuendouz.Models.Character", b =>
                {
                    b.HasOne("MyLittleRPG_ElGuendouz.Models.User", null)
                        .WithMany()
                        .HasForeignKey("utilisateurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
